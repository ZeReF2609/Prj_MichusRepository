@model Michus.Models.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<style>
    /* Contenedor para las tarjetas */
    .totals-container {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        margin-bottom: 20px;
    }

    /* Estilo de cada tarjeta */
    .totals-card {
        background-color: #D9C7F2;
        border-radius: 10px;
        padding: 15px 20px;
        border: 1px solid #A478D4;
        width: 30%;
        text-align: center;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .totals-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }

    /* Títulos dentro de las tarjetas */
    .title {
        font-size: 1.2rem;  
        font-weight: 600;
        color: #6F29B5;
        margin-bottom: 8px;
    }

    /* Valores dentro de las tarjetas */
    .total {
        font-size: 1.8rem;
        font-weight: 700;
        color: #513012;
    }

    /* Contenedor de gráficos */
    .chart-container {
        background-color: #fff;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        height: 400px; /* Altura fija */
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .chart-container canvas {
        height: 100% !important;
    }
</style>

<div class="min-h-screen bg-gray-100 py-6">
    <div class="container mx-auto px-4">
        <!-- Header -->
        <header class="bg-gradient-to-r from-6F29B5 to-A478D4 text-white py-8 px-6 rounded-lg shadow-lg mb-8">
            <h1 class="text-4xl font-bold text-center uppercase tracking-wide">Dashboard Michus</h1>
        </header>

        <!-- Totals Section -->
        <div class="totals-container">
            <div class="totals-card">
                <h5 class="title">Total Ventas</h5>
                <p class="total">@Model.TotalSales.ToString("N0")</p>
            </div>
            <div class="totals-card">
                <h5 class="title">Total Productos</h5>
                <p class="total">@Model.TotalProducts.ToString("N0")</p>
            </div>
            <div class="totals-card">
                <h5 class="title">Total Clientes</h5>
                <p class="total">@Model.TotalClients.ToString("N0")</p>
            </div>
        </div>

        <!-- Charts Section -->
        <section class="grid grid-cols-1 sm:grid-cols-2 gap-6">
            <!-- Product Count Chart -->
            <div class="chart-container">
                <h5 class="text-xl font-semibold mb-4 text-center text-gray-700">Productos por Categoría</h5>
                <canvas id="productCountChart"></canvas>
            </div>

            <!-- Product Value Chart -->
            <div class="chart-container">
                <h5 class="text-xl font-semibold mb-4 text-center text-gray-700">Valor por Categoría</h5>
                <canvas id="productValueChart"></canvas>
            </div>
        </section>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Configuración de datos para el gráfico de cantidad de productos
        const productCountData = {
            labels: [@Html.Raw(string.Join(",", Model.ProductCountByCategory.Select(x => $"'{x.Category}'")))],
            datasets: [{
                label: 'Cantidad de Productos',
                data: [@string.Join(",", Model.ProductCountByCategory.Select(x => x.ProductCount))],
                backgroundColor: ['#6F29B5', '#A478D4', '#D9C7F2', '#C4A484', '#8F6A53'], // Marrón pastel añadido
                borderColor: '#ffffff',
                borderWidth: 2
            }]
        };

        // Configuración de datos para el gráfico de valor de productos
        const productValueData = {
            labels: [@Html.Raw(string.Join(",", Model.ProductValueByCategory.Select(x => $"'{x.Category}'")))],
            datasets: [{
                data: [@string.Join(",", Model.ProductValueByCategory.Select(x => x.TotalValue))],
                backgroundColor: ['#6F29B5', '#A478D4', '#D9C7F2', '#C4A484', '#8F6A53'], // Marrón pastel añadido
                borderColor: '#ffffff',
                borderWidth: 2
            }]
        };

        // Renderizar gráfico de barras
        new Chart(document.getElementById('productCountChart').getContext('2d'), {
            type: 'bar',
            data: productCountData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { position: 'top' }
                },
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        // Renderizar gráfico circular
        new Chart(document.getElementById('productValueChart').getContext('2d'), {
            type: 'pie',
            data: productValueData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { position: 'right' }
                }
            }
        });
    </script>
}
